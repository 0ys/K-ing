stages:
  - build
  - deploy

frontend-build:
  stage: build
  image: node:22.13-alpine
  tags:
    - king-develop
  needs: []
  cache:
    paths:
      - king/node_modules
  script:
    - echo [INFO] 프론트엔드 파일 빌드중
    - cd king
    - echo VITE_GOOGLE_MAPS_API_KEY=$VITE_GOOGLE_MAPS_API_KEY >> .env
    - echo VITE_GOOGLE_MAPS_MAP_ID=$VITE_GOOGLE_MAPS_MAP_ID >> .env
    - echo VITE_API_BASE_URL=$VITE_API_BASE_URL >> .env
    - echo VITE_MASTER_ACCESS_TOKEN=$VITE_MASTER_ACCESS_TOKEN >> .env
    - npm install
    - npm run build
  artifacts:
    paths:
      - king/dist
    expire_in: 1 hour

backend-build:
  stage: build
  image: openjdk:17.0.2-slim-buster
  tags:
    - king-develop
  needs: []
  cache:
    paths:
      - king-backend/.gradle/wrapper/gradle-wrapper.jar
      - king-backend/.gradle/caches/
  script:
    - echo [INFO] 백엔드 파일 빌드중
    - cd king-backend
    - chmod +x ./gradlew
    - ./gradlew bootJar
  artifacts:
    paths:
      - king-backend/build/libs
    expire_in: 1 hour

nginx-build:
  stage: build
  tags:
    - king-develop
  needs: []
  script:
    - echo [INFO] nginx.conf 옮기는중
  artifacts:
    paths:
      - nginx.conf

make-env:
  stage: build
  tags:
    - king-develop
  needs: []
  script:
    - echo [INFO] 환경변수 옮기는 중
    - echo MYSQL_HOST=$MYSQL_HOST >> .env
    - echo MYSQL_PORT=$MYSQL_PORT >> .env
    - echo MYSQL_DB=$MYSQL_DB >> .env
    - echo MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD >>.env
    - echo MYSQL_USERNAME=$MYSQL_USERNAME >> .env
    - echo MYSQL_PASSWORD=$MYSQL_PASSWORD >> .env
    - echo REDIS_HOST=$REDIS_HOST >> .env
    - echo REDIS_PORT=$REDIS_PORT >> .env
    - echo REDIS_PASSWORD=$REDIS_PASSWORD >> .env
    - echo ELASTIC_HOST=$ELASTIC_HOST >> .env
    - echo ELASTIC_PORT=$ELASTIC_PORT >> .env
    - echo ELASTIC_USERNAME=$ELASTIC_USERNAME >> .env
    - echo ELASTIC_PASSWORD=$ELASTIC_PASSWORD >> .env
    - echo JWT_SECRET=$JWT_SECRET >> .env
    - echo ACCESSTOKEN_EXPIRES_IN=$ACCESSTOKEN_EXPIRES_IN >> .env
    - echo REFRESHTOKEN_EXPIRES_IN=$REFRESHTOKEN_EXPIRES_IN >> .env
    - echo OAUTH2_GOOGLE_CLIENT_ID=$OAUTH2_GOOGLE_CLIENT_ID >> .env
    - echo OAUTH2_GOOGLE_CLIENT_SECRET=$OAUTH2_GOOGLE_CLIENT_SECRET >> .env
    - echo OAUTH2_GOOGLE_API_ENDPOINT=$OAUTH2_GOOGLE_API_ENDPOINT >> .env
    - echo SERVER_BASE_URL=$SERVER_BASE_URL >> .env
    - echo CLIENT_BASE_URL=$CLIENT_BASE_URL >> .env
  artifacts:
    paths:
      - .env

deploy:
  stage: deploy
  image: docker:latest
  tags:
    - king-develop
  dependencies:
    - frontend-build
    - backend-build
    - nginx-build
    - make-env
  script:
    - echo [INFO] Docker compose 실행중
    - cp -r king/dist/ king/dist/
    - cp -r king-backend/build/libs/ king-backend/build/libs/
    - cp .env .env
    - cp nginx.conf nginx.conf
    - docker compose up --build -d
